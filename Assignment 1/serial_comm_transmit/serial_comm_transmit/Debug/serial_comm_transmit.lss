
serial_comm_transmit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000716  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066b  00000000  00000000  0000094e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f1  00000000  00000000  00000fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000012ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c6  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008a  00000000  00000000  00001726  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
void retriever_setup(void){
	DDRD = 0b11110000; //sets D pin 4-7 to output
}
int main(void)
{
	cli();
  80:	f8 94       	cli
	DDRD = 0b11110000;
  82:	80 ef       	ldi	r24, 0xF0	; 240
  84:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b00000000;
  86:	17 b8       	out	0x07, r1	; 7
	UBRR0H = (unsigned char) (MYUBRR >> 8);
  88:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char) MYUBRR;
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
		
	//enable transmit (change RXEN0 to 1 if retrieve is enabled)
	UCSR0B = (1<<TXEN0)|(0<<RXEN0);
  92:	88 e0       	ldi	r24, 0x08	; 8
  94:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
		
	//set 8 bit char and 2 stop bit
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  98:	8e e0       	ldi	r24, 0x0E	; 14
  9a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	ADMUX |= (1<<REFS0)|(1<<ADLAR);
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 66       	ori	r24, 0x60	; 96
  a6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	8f 6e       	ori	r24, 0xEF	; 239
  b0:	80 83       	st	Z, r24
	
/*	transmitter_setup();
	retriever_setup();
	USART_setup();
	*/
	while(!(UCSR0A & (1<<RXC0))){
  b2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  b6:	88 23       	and	r24, r24
  b8:	4c f0       	brlt	.+18     	; 0xcc <main+0x4c>
		PORTD=UDR0;
  ba:	a6 ec       	ldi	r26, 0xC6	; 198
  bc:	b0 e0       	ldi	r27, 0x00	; 0
	
/*	transmitter_setup();
	retriever_setup();
	USART_setup();
	*/
	while(!(UCSR0A & (1<<RXC0))){
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
		PORTD=UDR0;
  c2:	8c 91       	ld	r24, X
  c4:	8b b9       	out	0x0b, r24	; 11
	
/*	transmitter_setup();
	retriever_setup();
	USART_setup();
	*/
	while(!(UCSR0A & (1<<RXC0))){
  c6:	80 81       	ld	r24, Z
  c8:	88 23       	and	r24, r24
  ca:	dc f7       	brge	.-10     	; 0xc2 <main+0x42>
		PORTD=UDR0;
	}

	sei();
  cc:	78 94       	sei
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x4e>

000000d0 <__vector_21>:
    {
		//PORTD = USART_retrieve();
    }
}

ISR(ADC_vect){
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
//	USART_transmit(ADCH);
	while ( !( UCSR0A & (1<<UDRE0)) ){
  e8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  ec:	85 fd       	sbrc	r24, 5
  ee:	0b c0       	rjmp	.+22     	; 0x106 <__vector_21+0x36>
		UDR0 = ADCH;
  f0:	c9 e7       	ldi	r28, 0x79	; 121
  f2:	d0 e0       	ldi	r29, 0x00	; 0
  f4:	a6 ec       	ldi	r26, 0xC6	; 198
  f6:	b0 e0       	ldi	r27, 0x00	; 0
    }
}

ISR(ADC_vect){
//	USART_transmit(ADCH);
	while ( !( UCSR0A & (1<<UDRE0)) ){
  f8:	e0 ec       	ldi	r30, 0xC0	; 192
  fa:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = ADCH;
  fc:	88 81       	ld	r24, Y
  fe:	8c 93       	st	X, r24
    }
}

ISR(ADC_vect){
//	USART_transmit(ADCH);
	while ( !( UCSR0A & (1<<UDRE0)) ){
 100:	80 81       	ld	r24, Z
 102:	85 ff       	sbrs	r24, 5
 104:	fb cf       	rjmp	.-10     	; 0xfc <__vector_21+0x2c>
		UDR0 = ADCH;
	}
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	bf 91       	pop	r27
 110:	af 91       	pop	r26
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
