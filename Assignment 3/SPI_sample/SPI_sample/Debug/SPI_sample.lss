
SPI_sample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800100  00800100  00000280  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a0b  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000782  00000000  00000000  00000d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003de  00000000  00000000  000014d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  000018b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042f  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022b  00000000  00000000  00001dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001ffa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 31       	cpi	r26, 0x15	; 21
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  88:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_Init>:
// function to initialize UART
void USART_Init(void)
{
	
	// Set baud rate:
	UBRR0=103;                 //UBRR= Fosc /(16*9600) -1 =103.166= 103
  90:	87 e6       	ldi	r24, 0x67	; 103
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  98:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	// enable receiver and transmitter
	UCSR0B |=(1<<RXEN0 |(1 <<TXEN0));
  9c:	e1 ec       	ldi	r30, 0xC1	; 193
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	88 61       	ori	r24, 0x18	; 24
  a4:	80 83       	st	Z, r24

	// Set frame format : 8 data 2 stop bit

	UCSR0C = (1<<USBS0 )|(3<<UCSZ00);
  a6:	8e e0       	ldi	r24, 0x0E	; 14
  a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  ac:	08 95       	ret

000000ae <init>:
    }
}

void init()
{
	USART_Init();
  ae:	0e 94 48 00 	call	0x90	; 0x90 <USART_Init>
	/* Set SS, MOSI and SCK output, all others input */
	DDRB = (1<<SS)|(1<<MOSI)|(1<<SCK)|(1 << PORTB1);
  b2:	8e e2       	ldi	r24, 0x2E	; 46
  b4:	84 b9       	out	0x04, r24	; 4
	/* LED PIN */ 
	DDRB |= (1 << PORTB0);
  b6:	20 9a       	sbi	0x04, 0	; 4
	/* Set TXD as an output */
	DDRD = (1 << TXD);
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	8a b9       	out	0x0a, r24	; 10
	
	/* Set the slave select pin (Active low) */ 
	DISABLE_SS;
  bc:	2a 9a       	sbi	0x05, 2	; 5
	DISABLE_SS2;
  be:	29 9a       	sbi	0x05, 1	; 5
	
	/* Enable SPI, Master, set clock rate fosc/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  c0:	81 e5       	ldi	r24, 0x51	; 81
  c2:	8c bd       	out	0x2c, r24	; 44
  c4:	08 95       	ret

000000c6 <USART_Transmit>:
}

void USART_Transmit( uint8_t data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
  c6:	e0 ec       	ldi	r30, 0xC0	; 192
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	95 ff       	sbrs	r25, 5
  ce:	fd cf       	rjmp	.-6      	; 0xca <USART_Transmit+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
  d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  d4:	08 95       	ret

000000d6 <__vector_18>:
uint8_t TX_buf[UART_BUFF_SIZE];
uint8_t RX_index = 0;
uint8_t TX_index = 0;

ISR(USART_RX_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	3f 93       	push	r19
  e4:	4f 93       	push	r20
  e6:	5f 93       	push	r21
  e8:	6f 93       	push	r22
  ea:	7f 93       	push	r23
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	af 93       	push	r26
  f2:	bf 93       	push	r27
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
	RX_buf[RX_index++] = UDR0;
  f8:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <_edata>
  fc:	e1 e0       	ldi	r30, 0x01	; 1
  fe:	ea 0f       	add	r30, r26
 100:	e0 93 00 01 	sts	0x0100, r30	; 0x800100 <_edata>
 104:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	a5 5f       	subi	r26, 0xF5	; 245
 10c:	be 4f       	sbci	r27, 0xFE	; 254
 10e:	8c 93       	st	X, r24
	USART_Transmit(RX_buf[RX_index-1]);
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	e6 5f       	subi	r30, 0xF6	; 246
 114:	fe 4f       	sbci	r31, 0xFE	; 254
 116:	80 81       	ld	r24, Z
 118:	0e 94 63 00 	call	0xc6	; 0xc6 <USART_Transmit>
}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	7f 91       	pop	r23
 12a:	6f 91       	pop	r22
 12c:	5f 91       	pop	r21
 12e:	4f 91       	pop	r20
 130:	3f 91       	pop	r19
 132:	2f 91       	pop	r18
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <spi_tranceiver>:

/* spi data buffer load and send */
uint8_t spi_tranceiver (uint8_t data)
{
	// Load data into the buffer
	SPDR = data;
 13e:	8e bd       	out	0x2e, r24	; 46
	
	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF) ));
 140:	0d b4       	in	r0, 0x2d	; 45
 142:	07 fe       	sbrs	r0, 7
 144:	fd cf       	rjmp	.-6      	; 0x140 <spi_tranceiver+0x2>
	
	// Return received data
	return(SPDR);
 146:	8e b5       	in	r24, 0x2e	; 46
}
 148:	08 95       	ret

0000014a <IOEXP_IODIR>:



/* IO expander data direction set */
void IOEXP_IODIR(uint8_t data)
{
 14a:	cf 93       	push	r28
 14c:	c8 2f       	mov	r28, r24
	uint8_t r_data = 0;
					// Make slave select go low
				ENABLE_SS;
 14e:	2a 98       	cbi	0x05, 2	; 5
				/* Send device address + r/w */
				spi_tranceiver((1<<6)|WRITE);
 150:	80 e4       	ldi	r24, 0x40	; 64
 152:	0e 94 9f 00 	call	0x13e	; 0x13e <spi_tranceiver>
				/* Send command */
				spi_tranceiver(IODIR);
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 9f 00 	call	0x13e	; 0x13e <spi_tranceiver>

				spi_tranceiver(data);
 15c:	8c 2f       	mov	r24, r28
 15e:	0e 94 9f 00 	call	0x13e	; 0x13e <spi_tranceiver>
				// Make slave select go high
				DISABLE_SS;
 162:	2a 9a       	sbi	0x05, 2	; 5
				
}
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <IOEXP_datalatch>:


/* IO expander latch  set */
void IOEXP_datalatch(uint8_t data)
{
 168:	cf 93       	push	r28
 16a:	c8 2f       	mov	r28, r24
	// Make slave select go low
	ENABLE_SS;
 16c:	2a 98       	cbi	0x05, 2	; 5
	/* Send device address + r/w */
	spi_tranceiver((1<<6)|WRITE);
 16e:	80 e4       	ldi	r24, 0x40	; 64
 170:	0e 94 9f 00 	call	0x13e	; 0x13e <spi_tranceiver>
	/* Send command */
	spi_tranceiver(OUTP_LATCH);
 174:	8a e0       	ldi	r24, 0x0A	; 10
 176:	0e 94 9f 00 	call	0x13e	; 0x13e <spi_tranceiver>
	spi_tranceiver(data);
 17a:	8c 2f       	mov	r24, r28
 17c:	0e 94 9f 00 	call	0x13e	; 0x13e <spi_tranceiver>
	// Make slave select go high
	DISABLE_SS;
 180:	2a 9a       	sbi	0x05, 2	; 5
	
}
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <main>:
}

int main(void)
{
	int x=0;
	init();
 186:	0e 94 57 00 	call	0xae	; 0xae <init>
	/* Clearing buffers */
	memset(RX_buf,0,sizeof(RX_buf));
 18a:	8a e0       	ldi	r24, 0x0A	; 10
 18c:	eb e0       	ldi	r30, 0x0B	; 11
 18e:	f1 e0       	ldi	r31, 0x01	; 1
 190:	df 01       	movw	r26, r30
 192:	28 2f       	mov	r18, r24
 194:	1d 92       	st	X+, r1
 196:	2a 95       	dec	r18
 198:	e9 f7       	brne	.-6      	; 0x194 <main+0xe>
	memset(TX_buf,0,sizeof(TX_buf));
 19a:	e1 e0       	ldi	r30, 0x01	; 1
 19c:	f1 e0       	ldi	r31, 0x01	; 1
 19e:	df 01       	movw	r26, r30
 1a0:	1d 92       	st	X+, r1
 1a2:	8a 95       	dec	r24
 1a4:	e9 f7       	brne	.-6      	; 0x1a0 <main+0x1a>
	
	/* Enable interrupts */ 
	sei();
 1a6:	78 94       	sei
	
	/* set all pins of I/0 expander to output */
	IOEXP_IODIR(0);
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	0e 94 a5 00 	call	0x14a	; 0x14a <IOEXP_IODIR>
	/* set lower 4 bits (leds) high*/
	IOEXP_datalatch(0x0f);
 1ae:	8f e0       	ldi	r24, 0x0F	; 15
 1b0:	0e 94 b4 00 	call	0x168	; 0x168 <IOEXP_datalatch>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	bf ef       	ldi	r27, 0xFF	; 255
 1b6:	23 ed       	ldi	r18, 0xD3	; 211
 1b8:	80 e3       	ldi	r24, 0x30	; 48
 1ba:	b1 50       	subi	r27, 0x01	; 1
 1bc:	20 40       	sbci	r18, 0x00	; 0
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x34>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x3e>
 1c4:	00 00       	nop
	_delay_ms(1000);
	/* set higher 4 bits (leds) high*/
	IOEXP_datalatch(0xf0);
 1c6:	80 ef       	ldi	r24, 0xF0	; 240
 1c8:	0e 94 b4 00 	call	0x168	; 0x168 <IOEXP_datalatch>
 1cc:	9f ef       	ldi	r25, 0xFF	; 255
 1ce:	a3 ed       	ldi	r26, 0xD3	; 211
 1d0:	b0 e3       	ldi	r27, 0x30	; 48
 1d2:	91 50       	subi	r25, 0x01	; 1
 1d4:	a0 40       	sbci	r26, 0x00	; 0
 1d6:	b0 40       	sbci	r27, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0x4c>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x56>
 1dc:	00 00       	nop
	_delay_ms(1000);
	int16_t data = 0xaa;
   IOEXP_datalatch(data);   //set led
 1de:	8a ea       	ldi	r24, 0xAA	; 170
 1e0:	0e 94 b4 00 	call	0x168	; 0x168 <IOEXP_datalatch>
 1e4:	cb ea       	ldi	r28, 0xAB	; 171
    while (1) 
    {	 
		data++;
		//int16_t data = 0xaa;
		IOEXP_datalatch(data);   //set led
 1e6:	8c 2f       	mov	r24, r28
 1e8:	0e 94 b4 00 	call	0x168	; 0x168 <IOEXP_datalatch>
		USART_Transmit(data);    // give same value to USART
 1ec:	8c 2f       	mov	r24, r28
 1ee:	0e 94 63 00 	call	0xc6	; 0xc6 <USART_Transmit>
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	81 ee       	ldi	r24, 0xE1	; 225
 1f6:	94 e0       	ldi	r25, 0x04	; 4
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <main+0x72>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x7c>
 202:	00 00       	nop
 204:	cf 5f       	subi	r28, 0xFF	; 255
 206:	ef cf       	rjmp	.-34     	; 0x1e6 <main+0x60>

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
